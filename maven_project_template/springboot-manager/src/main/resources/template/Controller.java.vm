package ${package}.controller;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import cn.dev33.satoken.annotation.SaCheckPermission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import java.util.List;
import com.company.project.common.utils.DataResult;

import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;



/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    /**
    * 跳转到页面
    */
    @GetMapping("/index/${classname}")
    public String ${classname}() {
        return "${classNameLower}/list";
    }


    @ApiOperation(value = "查询分页数据")
    @PostMapping("${classname}/listByPage")
    @SaCheckPermission("${classname}:list")
    @ResponseBody
    public DataResult findListByPage(@RequestBody ${className}Entity ${classname}){
        LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
        //查询条件示例
        queryWrapper.eq(tbGoods.getId() != null, ${className}Entity::getId, ${classname}.getId());
        queryWrapper.orderByDesc(${className}Entity::getId);
        IPage<${className}Entity> iPage = ${classname}Service.page(${classname}.getQueryPage(), queryWrapper);
        return DataResult.success(iPage);
    }


    @ApiOperation(value = "新增")
    @PostMapping("${classname}/add")
    @SaCheckPermission("${classname}:add")
    @ResponseBody
    public DataResult add(@RequestBody ${className}Entity ${classname}){
            ${classname}Service.save(${classname});
        return DataResult.success();
    }

    @ApiOperation(value = "删除")
    @DeleteMapping("${classname}/delete")
    @SaCheckPermission("${classname}:delete")
    @ResponseBody
    public DataResult delete(@RequestBody @ApiParam(value = "id集合") List<String> ids){
            ${classname}Service.removeByIds(ids);
        return DataResult.success();
    }

    @ApiOperation(value = "更新")
    @PutMapping("${classname}/update")
    @SaCheckPermission("${classname}:update")
    @ResponseBody
    public DataResult update(@RequestBody ${className}Entity ${classname}){
            ${classname}Service.updateById(${classname});
        return DataResult.success();
    }



}
